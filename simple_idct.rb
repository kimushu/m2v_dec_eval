#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#================================================================================
# FAST IDCT の生成用スクリプト
# $Id$
#
# y=cos(PI*x/16) の法則性
#
# cos だから x'=-x としても同じ。(偶関数)
# さらに、x'=PI-x とすると符号反転
#
# ということは、x=0,1,2,3,4,5,6,7,8 だけあればいいということ。
# そのうち x=0 は y=1 、x=8 は y=0 となる。
#================================================================================

SHIFT = 10
# (1..7).each {|x|
# 	puts("#define W#{x}\t#{(Math.cos(x * Math::PI / 16) * (1 << SHIFT) + 0.5).to_i}")
# }
# exit

puts(<<EOD)
//================================================================================
// m1v_dec_eval - 簡易 IDCT (式のまま書くよりかは速い^^;)
// Do not edit this file. This file was generated by dump.rb.
//================================================================================

void simple_idct(const int L[8][8], int S[8][8])
{
	int x;
EOD

(0...8).each {|j| (0...8).each {|i|
	# puts("// (j,i)=[#{j}][#{i}]")
	puts("\tx = 0;")
	(0...8).each {|k| (0...8).each {|l|
		coef = 1
		coef /= Math::sqrt(2) if k == 0
		coef /= Math::sqrt(2) if l == 0
		coef *= Math.cos(k * (2 * i + 1) * Math::PI / 16)
		coef *= Math.cos(l * (2 * j + 1) * Math::PI / 16)
		coef *= (1 << SHIFT)
		icoef = coef.round
		puts("\tx += L[#{k}][#{l}] * #{icoef};")
	}}
	print(<<EOD)
	x += (x >= 0) ? (1 << #{SHIFT-1}) : -(1 << #{SHIFT-1});
	S[#{j}][#{i}] = x / (1 << #{SHIFT});
EOD
}}

print(<<EOD)
}

// END OF FILE

EOD

